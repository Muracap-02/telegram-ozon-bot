
import os
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, MessageHandler, filters,
    ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler
)
import tempfile
import logging
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import zipfile
from openpyxl.cell.cell import MergedCell

logging.basicConfig(format='[LOG] %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TEMPLATE_FILENAME = "AllPackageEC_.xlsx"
TEMPLATE_PATH = os.path.join(os.path.dirname(__file__), TEMPLATE_FILENAME)

MODE_CHOICE = {}
PINFL_STEP, PINFL_SOURCE, PINFL_PINFL = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (1000)", callback_data="chunk")],
        [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (500)", callback_data="chunk500")],
        [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (250)", callback_data="chunk250")],
        [InlineKeyboardButton("üìÑ –ú–∞–∫—Ä–æ—Å –ü–∞—Å—Å–ø–æ—Ä—Ç", callback_data="passport")],
        [InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∞ –ü–ò–ù–§–õ", callback_data="pinfl_replace")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=reply_markup)

async def mode_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    MODE_CHOICE[user_id] = query.data

    if query.data == "pinfl_replace":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ (source).")
        context.user_data['pinfl_step'] = PINFL_SOURCE
        return PINFL_STEP
    else:
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return ConversationHandler.END

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    mode = MODE_CHOICE.get(user_id)

    if not mode:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ /start.")
        return

    document = update.message.document
    file = await context.bot.get_file(document.file_id)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as f:
        await file.download_to_drive(f.name)
        data_file = f.name

    if mode == "chunk":
        await process_in_parts(update, context, data_file, chunk_size=1000)
    elif mode == "chunk500":
        await process_in_parts(update, context, data_file, chunk_size=500)
    elif mode == "chunk250":
        await process_in_parts(update, context, data_file, chunk_size=250)
    elif mode == "passport":
        await process_passport_macro(update, context, data_file)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–Ω–æ–≤–æ
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (1000)", callback_data="chunk")],
        [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (500)", callback_data="chunk500")],
        [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (250)", callback_data="chunk250")],
        [InlineKeyboardButton("üìÑ –ú–∞–∫—Ä–æ—Å –ü–∞—Å—Å–ø–æ—Ä—Ç", callback_data="passport")],
        [InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∞ –ü–ò–ù–§–õ", callback_data="pinfl_replace")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=reply_markup)

async def process_in_parts(update, context, data_file, chunk_size=1000):
    logger.info(f"[LOG] –û–±—Ä–∞–±–æ—Ç–∫–∞: —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ {chunk_size} —à—Ç.")
    df = pd.read_excel(data_file, header=None, skiprows=3)

    def fix_code(x):
        try:
            s = str(int(float(x)))
            if len(s) == 5:
                return "0" + s
            return x
        except:
            return x

    df[10] = df[10].apply(fix_code)

    seen = set()
    for idx, val in df[0].items():
        val = str(val).strip()
        if val and val in seen:
            df.loc[idx, 0:7] = None
        else:
            seen.add(val)

    parts = [df[i:i + chunk_size] for i in range(0, len(df), chunk_size)]

    output_files = []
    for idx, part in enumerate(parts):
        wb = load_workbook(TEMPLATE_PATH)
        ws = wb.active

        for r_idx, row in enumerate(dataframe_to_rows(part, index=False, header=False), start=4):
            for c_idx, value in enumerate(row, start=1):
                ws.cell(row=r_idx, column=c_idx, value=value)

        start_range = idx * chunk_size
        filename = f"AllPackageEC_{start_range}.xlsx"
        output_path = os.path.join(tempfile.gettempdir(), filename)
        wb.save(output_path)
        output_files.append(output_path)
        logger.info(f"[LOG] –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª: {filename}")

    zip_path = os.path.join(tempfile.gettempdir(), f"AllPackageEC_{update.message.from_user.username}.zip")
    with zipfile.ZipFile(zip_path, 'w') as zipf:
        for file_path in output_files:
            zipf.write(file_path, os.path.basename(file_path))

    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...")
    await context.bot.send_document(chat_id=update.message.chat_id, document=open(zip_path, 'rb'))

async def process_passport_macro(update, context, data_file):
    logger.info("[LOG] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∞–∫—Ä–æ—Å '–ü–∞—Å—Å–ø–æ—Ä—Ç'")
    wb = load_workbook(data_file)
    ws = wb.active

    valid_start = "123456789MRTGKZECUVFBNDGHJLKQIP"
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
        val = str(row[4].value).strip() if row[4].value else ""
        if val and val[0].upper() in valid_start:
            row[4].value = "AB0663236"
            row[5].value = "23,12,1988"

    output_path = os.path.join(tempfile.gettempdir(), f"PassportUpdated_{update.message.from_user.username}.xlsx")
    wb.save(output_path)

    await update.message.reply_text("–ú–∞–∫—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...")
    await context.bot.send_document(chat_id=update.message.chat_id, document=open(output_path, 'rb'))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ–Ω—ã –ü–ò–ù–§–õ ---

async def pinfl_file_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    file = await context.bot.get_file(document.file_id)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as f:
        await file.download_to_drive(f.name)
        data_file = f.name

    step = context.user_data.get('pinfl_step')
    if step == PINFL_SOURCE:
        context.user_data['pinfl_source'] = data_file
        context.user_data['pinfl_step'] = PINFL_PINFL
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ü–ò–ù–§–õ.")
        return PINFL_STEP
    elif step == PINFL_PINFL:
        context.user_data['pinfl_pinfl'] = data_file
        await update.message.reply_text("–§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –í—ã–ø–æ–ª–Ω—è—é –∑–∞–º–µ–Ω—É –ü–ò–ù–§–õ...")
        await replace_pinfl(update, context)
        context.user_data.clear()
        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–Ω–æ–≤–æ
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (1000)", callback_data="chunk")],
            [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (500)", callback_data="chunk500")],
            [InlineKeyboardButton("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (250)", callback_data="chunk250")],
            [InlineKeyboardButton("üìÑ –ú–∞–∫—Ä–æ—Å –ü–∞—Å—Å–ø–æ—Ä—Ç", callback_data="passport")],
            [InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∞ –ü–ò–ù–§–õ", callback_data="pinfl_replace")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=reply_markup)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return ConversationHandler.END

async def replace_pinfl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    source_file = context.user_data.get('pinfl_source')
    pinfl_file = context.user_data.get('pinfl_pinfl')
    if not source_file or not pinfl_file:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª pinfl, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    df2 = pd.read_excel(pinfl_file, header=None)

    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å: –ø–∞—Å–ø–æ—Ä—Ç -> –ü–ò–ù–§–õ
    passport_to_pinfl = dict(
        zip(df2.iloc[:, 8].astype(str).str.strip().str.upper(), df2.iloc[:, 9])
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Excel-—Ñ–∞–π–ª —Å–æ —Å—Ç–∏–ª—è–º–∏
    wb = load_workbook(filename=source_file)
    ws = wb.active  # –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç

    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞—á–∞–ª–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
    valid_start = tuple('0123456789KJTIFHBMNCXZSDQWRYUPLE')

    # –õ–æ–≥ –∑–∞–º–µ–Ω
    replacements = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π
    for row in ws.iter_rows(min_row=2):
        cell_e = row[4]  # –∫–æ–ª–æ–Ω–∫–∞ E (–ø–∞—Å–ø–æ—Ä—Ç)
        cell_f = row[5]  # –∫–æ–ª–æ–Ω–∫–∞ F (–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è)
        val = cell_e.value

        # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è ‚Äî —Å—Ç–∞–≤–∏–º –ø–∞—Å–ø–æ—Ä—Ç –∏ –¥–∞—Ç—É
        if val is None or str(val).strip() == '':
            cell_e.value = 'AB0663236'
            if not isinstance(cell_f, MergedCell):
                cell_f.value = '23.12.1988'
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {cell_f.row}")
            continue

        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–µ ‚Äî –ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ —Å–ª–æ–≤–∞—Ä—é
        key = str(val).strip().upper()
        if key.startswith(valid_start):
            pinfl = passport_to_pinfl.get(key)
            if pinfl:
                replacements.append((val, pinfl))
                cell_e.value = pinfl

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = os.path.join(tempfile.gettempdir(), f"AllPackageEC_GOOD_{update.message.from_user.username}.xlsx")
    wb.save(output_file)

    # –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –∑–∞–º–µ–Ω
    log_path = os.path.join(tempfile.gettempdir(), f"–∑–∞–º–µ–Ω—ã_log_{update.message.from_user.username}.txt")
    with open(log_path, 'w', encoding='utf-8') as log_file:
        for old, new in replacements:
            log_file.write(f'{old} ‚Üí {new}
')

    await update.message.reply_text(f'‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é... –ó–∞–º–µ–Ω–µ–Ω–æ {len(replacements)} –ø–∞—Å–ø–æ—Ä—Ç–æ–≤.')
    await context.bot.send_document(chat_id=update.message.chat_id, document=open(output_file, 'rb'))
    await context.bot.send_document(chat_id=update.message.chat_id, document=open(log_path, 'rb'))

def main():
    app = ApplicationBuilder().token("7872241701:AAF633V3rjyXTJkD8F0lEW13nDtAqHoqeic").build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(mode_selected)],
        states={
            PINFL_STEP: [MessageHandler(filters.Document.FileExtension("xlsx"), pinfl_file_received)],
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Document.FileExtension("xlsx"), handle_file))

    logger.info("[LOG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
